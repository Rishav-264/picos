import { Inject, Injectable } from '@nestjs/common';
import { PG_CONNECTION } from 'src/constants';
import { IsUUID, IsEnum, IsDate, IsString, IsNotEmpty, Length, Matches, IsOptional } from 'class-validator';
import { Type } from 'class-transformer';

export enum BillingType {
  COMPANY = 'COMPANY',
  OUTLET = 'OUTLET',
}

export class BillingInfoEntity {
  @IsUUID()
  @IsNotEmpty()
  id: string; // auto-generated by DB

  @IsUUID()
  @IsNotEmpty()
  company_id: string;

  @IsEnum(BillingType)
  @IsNotEmpty()
  billing_type: BillingType;

  @IsString()
  @Matches(/^[0-9A-Z]{15}$/, { message: 'Invalid GSTIN format' })
  @IsNotEmpty()
  gstin: string;

  @IsString()
  @IsNotEmpty()
  pan: string;

  @IsString()
  @IsNotEmpty()
  billing_address_line1: string;

  @IsString()
  @IsNotEmpty()
  billing_address_line2: string;

  @IsString()
  @IsNotEmpty()
  city: string;

  @IsString()
  @IsNotEmpty()
  state: string;

  @IsString()
  @IsNotEmpty()
  @Length(6, 6, { message: 'Pincode must be 6 digits' })
  pincode: string;

  @IsString()
  @IsNotEmpty()
  state_code: string;

  @IsOptional()
  @IsString()
  bank_account_number: string;

  @IsOptional()
  @IsString()
  bank_ifsc: string;

  @IsOptional()
  @IsString()
  invoice_prefix: string;

  @Type(() => Date)
  @IsDate()
  @IsNotEmpty()
  created_at: Date;

  @Type(() => Date)
  @IsDate()
  @IsNotEmpty()
  updated_at: Date;
}

@Injectable()
export class BillingInfoRepositoryService {

    private createBillingInfo = `
    INSERT INTO rito.billing_info (
        company_id,
        billing_type,
        gstin,
        pan,
        billing_address_line1,
        billing_address_line2,
        city,
        state,
        pincode,
        state_code,
        bank_account_number,
        bank_ifsc,
        invoice_prefix
    ) VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13
    ) RETURNING *;
`;

    constructor(@Inject(PG_CONNECTION) private conn: any) {}

    async create(billingInfoDto: Omit<BillingInfoEntity, 'id' | 'created_at' | 'updated_at'>) {
    const result = await this.conn.query(this.createBillingInfo, [
        billingInfoDto.company_id,
        billingInfoDto.billing_type,
        billingInfoDto.gstin,
        billingInfoDto.pan,
        billingInfoDto.billing_address_line1,
        billingInfoDto.billing_address_line2,
        billingInfoDto.city,
        billingInfoDto.state,
        billingInfoDto.pincode,
        billingInfoDto.state_code,
        billingInfoDto.bank_account_number,
        billingInfoDto.bank_ifsc,
        billingInfoDto.invoice_prefix,
    ]);

    return result.rows?.[0];
}
}
