import { Inject, Injectable } from '@nestjs/common';
import { PG_CONNECTION } from 'src/constants';
import { Pool } from 'pg';
export class CompanyEntity {
  id: string; // UUID generated by DB
  business_name: string;
  email: string;
  address_line1: string;
  address_line2: string | null;
  city: string;
  state: string;
  pincode: string;
  phone_number: string;
  fssai_license_number: string;
  trade_name: string;
  owner: string;
  pan: string;
  created_at: Date;
  updated_at: Date;
}

@Injectable()
export class CompanyRepositoryService {
    constructor(@Inject(PG_CONNECTION) private conn: Pool) {}
    private createCompany = `
        INSERT INTO rito.company (
            business_name,
            email,
            address_line1,
            address_line2,
            city,
            state,
            pincode,
            phone_number,
            fssai_license_number,
            trade_name,
            owner,
            pan
        ) VALUES (
            $1,
            $2,
            $3,
            $4, 
            $5,
            $6,
            $7,
            $8,
            $9,
            $10,
            $11,
            $12
        ) RETURNING *;
    `

    // testing
    private getAllCompanies = `
        SELECT
            id,
            business_name,
            email,
            address_line1,
            address_line2,
            city,
            state,
            pincode,
            phone_number,
            fssai_license_number,
            trade_name,
            owner,
            pan,
            created_at,
            updated_at
        FROM rito.company
    `

    async create(companyEntity: Omit<CompanyEntity, 'id' | 'created_at' | 'updated_at'>) {
        const result = await this.conn.query<CompanyEntity>(this.createCompany, [
            companyEntity.business_name,
            companyEntity.email,
            companyEntity.address_line1,
            companyEntity.address_line2 ?? null,
            companyEntity.city,
            companyEntity.state,
            companyEntity.pincode,
            companyEntity.phone_number,
            companyEntity.fssai_license_number,
            companyEntity.trade_name,
            companyEntity.owner,
            companyEntity.pan
        ])

        return result.rows?.[0];
    }

    async getAllCompaniesTest() {
        const result = await this.conn.query(this.getAllCompanies)
        return result.rows
    }
    
}
