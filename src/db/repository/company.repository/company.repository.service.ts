import { Inject, Injectable } from '@nestjs/common';
import { PG_CONNECTION } from 'src/constants';
import { Pool } from 'pg'
import { IsEmail, IsNotEmpty, IsOptional, IsString, Length } from 'class-validator';

export class CompanyDTO {
  @IsOptional()
  id?: string; // UUID generated by DB

  @IsNotEmpty()
  @IsString()
  business_name: string;

  @IsNotEmpty()
  @IsEmail()
  email: string;

  @IsNotEmpty()
  @IsString()
  address_line1: string;

  @IsOptional()
  @IsString()
  address_line2?: string;

  @IsNotEmpty()
  @IsString()
  city: string;

  @IsNotEmpty()
  @IsString()
  state: string;

  @IsNotEmpty()
  @IsString()
  @Length(6, 10) // Indian pincodes are 6 digits, but keeping a range
  pincode: string;

  @IsNotEmpty()
  @IsString()
  @Length(10, 15) // phone number length validation
  phone_number: string;

  @IsNotEmpty()
  @IsString()
  fssai_license_number: string;

  @IsNotEmpty()
  @IsString()
  trade_name: string;

  @IsNotEmpty()
  @IsString()
  owner: string;

  @IsNotEmpty()
  @IsString()
  @Length(10, 10) // Indian PAN is 10 characters
  pan: string;

  @IsOptional()
  created_at?: Date;

  @IsOptional()
  updated_at?: Date;
}



@Injectable()
export class CompanyRepositoryService {
    constructor(@Inject(PG_CONNECTION) private conn: Pool) {}
    private createCompany = `
        INSERT INTO rito.company (
            business_name,
            email,
            address_line1,
            address_line2,
            city,
            state,
            pincode,
            phone_number,
            fssai_license_number,
            trade_name,
            owner,
            pan
        ) VALUES (
            $1,
            $2,
            $3,
            $4, 
            $5,
            $6,
            $7,
            $8,
            $9,
            $10,
            $11,
            $12
        ) RETURNING *;
    `

    // testing
    private getAllCompanies = `
        SELECT
            id,
            business_name,
            email,
            address_line1,
            address_line2,
            city,
            state,
            pincode,
            phone_number,
            fssai_license_number,
            trade_name,
            owner,
            pan,
            created_at,
            updated_at
        FROM rito.company
    `

    async create(companyDto: CompanyDTO) {
        const result = await this.conn.query<CompanyDTO>(this.createCompany, [
            companyDto.business_name,
            companyDto.email,
            companyDto.address_line1,
            companyDto.address_line2,
            companyDto.city,
            companyDto.state,
            companyDto.pincode,
            companyDto.phone_number,
            companyDto.fssai_license_number,
            companyDto.trade_name,
            companyDto.owner,
            companyDto.pan
        ])

        return result.rows?.[0];
    }

    async getAllCompaniesTest() {
        const result = await this.conn.query(this.getAllCompanies)
        return result.rows
    }
    
}
